@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers

@inherits PluginTileComponent

@if (_isSuccess)
{
    <div class="d-flex flex-column">
        <div class="row m-0">
            <div class="col-sm font-weight-bold">
                qBittorrent
            </div>
            <div class="w-100"></div>
            <div class="col-sm">
                <ChartJsLineChart @ref="_chart"
                                   Config="@_config" Height="86"/>
            </div>
        </div>
        <div class="row m-0">
            <div class="col-sm d-flex flex-row">
                <i class="fas fa-download mr-2"></i>
                <span>@FormatBytes(_currentDownload)</span>
            </div>
            <div class="col-sm d-flex flex-row">
                <i class="fas fa-upload mr-2"></i>
                <span>@FormatBytes(_currentUpload)</span>
            </div>
        </div>
    </div>
}
else
{
    <span class="text-danger">Unable to get qBittorrent stats. Make sure qBittorrent is accessible and set in the <a href="@($"/settings/plugins/{PluginKey}")">plugin settings</a>.</span>
}

@code
{
    public override string Url { get; set; }

    private int _currentDownload;
    private int _currentUpload;
    private bool _isSuccess;

    private string[] sizes = { "B", "KiB", "MiB", "GiB", "TiB" };

    private LineConfig _config;
    private LineDataset<TimeTuple<int>> _downloadDataSet;
    private LineDataset<TimeTuple<int>> _uploadDataSet;

    private ChartJsLineChart _chart;
    
    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = false
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis()
                        {
                            Time = new TimeOptions()
                            {
                                TooltipFormat = "HH:mm:ss"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>()
                    {
                        new LinearCartesianAxis()
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                SuggestedMin = 0,
                                SuggestedMax = 1
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _config.Options.Responsive = true;

        _downloadDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = "#0b7ce750",
            BorderColor = "#0b7ce7",
            Label = "Download",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 0,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        _uploadDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = "#1ea40b50",
            BorderColor = "#1ea40b",
            Label = "Upload",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 0,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        _config.Data.Datasets.Add(_downloadDataSet);
        _config.Data.Datasets.Add(_uploadDataSet);

        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(50);
        await _chart.SetTickCallback(_config.CanvasId);
    }

    public override bool OnUpdate()
    {
        _currentDownload = Data.GetData<int>("CurrentDownload");
        _currentUpload = Data.GetData<int>("CurrentUpload");
        _isSuccess = Data.GetData<bool>("IsSuccess");

        if (_isSuccess)
        {
            if(_downloadDataSet.Data.Count >= 50)
                _downloadDataSet.RemoveAt(0);

            if(_uploadDataSet.Data.Count >= 50)
                _uploadDataSet.RemoveAt(0);

            _downloadDataSet?.Add(new TimeTuple<int>(new Moment(DateTime.Now), _currentDownload));
            _uploadDataSet?.Add(new TimeTuple<int>(new Moment(DateTime.Now), _currentUpload));
        }

        return true;
    }

    private string FormatBytes(int bytes)
    {
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.#} {sizes[order]}";
    }
}
