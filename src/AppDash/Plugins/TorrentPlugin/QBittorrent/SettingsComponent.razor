@using AppDash.Core
@using Newtonsoft.Json.Linq
@inherits AppDash.Plugins.Settings.PluginSettingsComponent

@inject NavigationManager NavigationManager

<FormGroup>
    <Input Title="Web-UI address" Text="Fill in the IP address/host and port of your qBittorrent instance below, http://localhost:8080/ by default." Value="@_host" OnChange="@(value => OnHostChange(value))" />
</FormGroup>

<FormGroup>
    <Input Title="Username" Placeholder="Unchanged/not set" Text="The username will only be used to get a login cookie when logging in below, it will not be saved." Value="@_username" OnChange="@(value => OnUsernameChange(value))" />
</FormGroup>

<FormGroup>
    <Input Title="Password" Type="password" Placeholder="Unchanged/not set" Text="The password will only be used to get a login cookie when logging in below, it will not be saved." Value="@_password" OnChange="@(value => OnPasswordChange(value))" />
</FormGroup>

<FormGroup>
    <Button Text="Login" Disabled="@(!IsValidInput())" OnClick="@(async () => await Login())"></Button>
    @if (!string.IsNullOrEmpty(_testConnectionError))
    {
        <span class="text-danger">@_testConnectionError</span>
    }
    else if (!string.IsNullOrEmpty(_testConnectionSuccess))
    {
        <span class="text-success">@_testConnectionSuccess</span>
    }
</FormGroup>

<FormGroup>
    <Button Text="Save" Disabled="@(!IsValidInput() || string.IsNullOrEmpty(_loginCookie))" OnClick="@(async () => await Save())"></Button>
</FormGroup>

@code
{
    private string _host;
    private string _username;
    private string _password;

    private string _loginCookie;

    private string _testConnectionError;
    private string _testConnectionSuccess;

    public override Task Initialize()
    {
        _host = SettingsData.GetData<string>("Host");

        if (string.IsNullOrEmpty(_host))
            _host = "http://localhost:8080/";

        return Task.CompletedTask;
    }

    private async Task Login()
    {
        if (!IsValidInput())
            return;

        var result = await HttpClient.PostJson<JObject>(NavigationManager.BaseUri + $"api/plugins/{PluginKey}/qBittorrent/login", new
        {
            Host = _host,
            Username = _username,
            Password = _password
        });

        if (result["isSuccess"]?.Value<bool>() ?? false)
        {
            _loginCookie = result["loginCookie"]?.Value<string>();

            _testConnectionSuccess = "Successfully logged in.";
            _testConnectionError = null;
        }
        else
        {
            _testConnectionError = "Unable to login, make sure your credentials and web-UI address/port are correct.";
            _testConnectionSuccess = null;
        }

        StateHasChanged();
    }

    private async Task Save()
    {
        if (!IsValidInput())
            return;

        SettingsData.SetData("Host", _host);
        SettingsData.SetData("Cookie", _loginCookie);

        await SaveSettingsData();
    }

    private Task OnHostChange(string value)
    {
        _host = value;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnUsernameChange(string value)
    {
        _username = value;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnPasswordChange(string value)
    {
        _password = value;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private bool IsValidInput()
    {
        if (string.IsNullOrEmpty(_host))
            return false;

        if (!Uri.TryCreate(_host, UriKind.Absolute, out Uri uriResult) || uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps)
            return false;

        if (string.IsNullOrEmpty(_username))
            return false;

        if (string.IsNullOrEmpty(_password))
            return false;

        return true;
    }
}
