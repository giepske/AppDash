@page "/settings/plugins/{pluginKey}"

@using AppDash.Client.Plugins
@using AppDash.Core
@using AppDash.Plugins
@using AppDash.Plugins.Settings
@using Newtonsoft.Json


@inject SettingsManager SettingsManager
@inject PluginSettingsManager PluginSettingsManager
@inject PluginResolver PluginResolver
@inject HttpClient HttpClient

<div class="container">
    @if (!string.IsNullOrEmpty(PluginKey) && _settingsComponent != null)
    {
        @(RenderComponent(_settingsComponent))
    }
</div>

@code {
    [Parameter]
    public string PluginKey { get; set; }

    private PluginSettingsComponent _settingsComponent;

    private PluginData SettingsData;

    protected override async Task OnInitializedAsync()
    {
        _settingsComponent = await SettingsManager.GetSettingComponent(PluginKey);

        SettingsData = await PluginSettingsManager.GetPluginSettings(PluginKey);

        //_settingsComponent.SettingsData = SettingsData;
        //_settingsComponent.HttpClient = HttpClient;
        //_settingsComponent.PluginKey = PluginKey;

        //await _settingsComponent.Initialize();
    }
    
    private RenderFragment RenderComponent(ComponentBase component)
    {
        return builder =>
        {
            builder.OpenComponent(0, component.GetType());
            builder.AddComponentReferenceCapture(1, async inst =>
            {
                component = (ComponentBase)inst;
                if (component is PluginSettingsComponent settingsComponent)
                {
                    await SettingsManager.SetPluginSettingsComponent(settingsComponent);

                    _settingsComponent = settingsComponent;

                    Console.WriteLine("settingsComponent.SettingsData " + settingsComponent.SettingsData);
                    Console.WriteLine("settingsComponent.HttpClient " + settingsComponent.HttpClient);
                    Console.WriteLine("settingsComponent.PluginKey " + settingsComponent.PluginKey);

                    await _settingsComponent.Initialize();

                    _settingsComponent.StateHasChanged();
                }
            });
            builder.CloseComponent();
        };
    }
}